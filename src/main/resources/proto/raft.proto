syntax = "proto3";

package com.moniepoint.kvstore.raft;

option java_multiple_files = true;
option java_package = "com.moniepoint.kvstore.raft.grpc";
option java_outer_classname = "RaftProto";

// Raft Consensus Service
service RaftService {
  // AppendEntries RPC (used for heartbeat and log replication)
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  
  // RequestVote RPC (used for leader election)
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  
  // InstallSnapshot RPC (used for snapshot installation)
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
  
  // Get cluster status
  rpc GetClusterStatus(ClusterStatusRequest) returns (ClusterStatusResponse);
}

// AppendEntries RPC
message AppendEntriesRequest {
  int64 term = 1;
  string leader_id = 2;
  int64 prev_log_index = 3;
  int64 prev_log_term = 4;
  repeated LogEntry entries = 5;
  int64 leader_commit = 6;
}

message AppendEntriesResponse {
  int64 term = 1;
  bool success = 2;
  string error = 3;
}

// RequestVote RPC
message RequestVoteRequest {
  int64 term = 1;
  string candidate_id = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

message RequestVoteResponse {
  int64 term = 1;
  bool vote_granted = 2;
  string error = 3;
}

// InstallSnapshot RPC
message InstallSnapshotRequest {
  int64 term = 1;
  string leader_id = 2;
  int64 last_included_index = 3;
  int64 last_included_term = 4;
  int64 offset = 5;
  bytes data = 6;
  bool done = 7;
}

message InstallSnapshotResponse {
  int64 term = 1;
  bool success = 2;
  string error = 3;
}

// Log Entry
message LogEntry {
  int64 term = 1;
  int64 index = 2;
  string operation = 3;
  string key = 4;
  string value = 5;
  int64 ttl = 6;
  int64 timestamp = 7;
}

// Cluster Status
message ClusterStatusRequest {
  // Empty message
}

message ClusterStatusResponse {
  bool success = 1;
  string node_id = 2;
  NodeState state = 3;
  int64 current_term = 4;
  int64 last_log_index = 5;
  int64 last_log_term = 6;
  int64 commit_index = 7;
  int64 last_applied = 8;
  repeated NodeInfo nodes = 9;
  string error = 10;
}

// Node State Enum
enum NodeState {
  FOLLOWER = 0;
  CANDIDATE = 1;
  LEADER = 2;
}

// Node Information
message NodeInfo {
  string node_id = 1;
  string host = 2;
  int32 port = 3;
  NodeState state = 4;
  int64 current_term = 5;
  int64 last_log_index = 6;
  int64 last_log_term = 7;
  bool is_leader = 8;
  int64 next_index = 9;
  int64 match_index = 10;
} 